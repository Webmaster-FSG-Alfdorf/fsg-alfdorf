import wixData from 'wix-data';
import { triggeredEmails, contacts } from 'wix-crm-backend';

import { nightsBetween, toLocal, debugStr } from 'public/cms.js';

/**
 * Checks if given date range is (partially) disabled / occupied while respecting lodging based capacities.
 * For sub lodgings it ensures capacity of the base lodging is sufficient and specific sub lodging is not occupied.
 * @param {string} lodging
 * @param {Number} lodgingSub
 * @param {Date}   dateFrom
 * @param {Date}   dateTo
 * @param {string} exclude if set, reservations from this item will be ignored
 * @returns {Promise<Object>} containing {Number} capacity, {{{Date} start, {Date} end, {Number} count} []} occupations
 */
export async function getOccupations(lodging, lodgingSub, dateFrom, dateTo, exclude = "") {
    if (!lodging) return { capacity: 0, occupations: [] };
    const resL = await wixData.query("lodgings").eq("lodgingID", lodging).find();
    if (resL.items.length > 1) console.error(`Have multiple matches from #lodgings with lodgingID == ${lodging}: ${resL.items}`);
    const capacity = resL.items.length == 0 ? 0 : resL.items[0].capacity;

    console.log("getOccupations for", lodging, "capacity", capacity, debugStr(dateFrom), "to", debugStr(dateTo));
    if (capacity <= 0) return { capacity: 0, occupations: [] }; // cannot check availability if lodging field is empty / invalid

    const res = await wixData.query("disabledDates").eq("lodging", lodging).le("dateFrom", dateTo).ge("dateTo", dateFrom).find();
    let occupations = [];
    res.items.forEach(item => {
        if (item._id != exclude) {
            const start = toLocal(item.dateFrom);
            const end = toLocal(item.dateTo);
            // if our specfic sub lodging is occupied, we have no capacity remaining, so count == maxAvailable
            const count = lodgingSub > 0 && item.lodgingSub == lodgingSub ? capacity : 1;
            occupations.push({ start, end, count });
        }
    });

    console.log("getOccupations", occupations);

    return { capacity, occupations };
}

/**
 * Checks if any date within the given date range is fully occupied based on lodging capacities.
 * For sub lodgings it ensures capacity of the base lodging is sufficient and specific sub lodging is not occupied.
 * @param {string} lodging
 * @param {Number} lodgingSub
 * @param {Date}   dateFrom
 * @param {Date}   dateTo
 * @param {boolean} suggest later arrival or earlier departure suggestion
 * @param {string} exclude if set, reservations from this item will be ignored
 * @returns {Promise<any>}
 */
export async function isDateOccupied(lodging, lodgingSub, dateFrom, dateTo, suggest = false, exclude = "") {
    const dt = new Date(dateFrom);
    dt.setUTCHours(0, 0, 0, 0);
    const res = await getOccupations(lodging, lodgingSub, dateFrom, dateTo, exclude);

    const occupied = (dt) => {
        let ocSum = 0;
        res.occupations.forEach((oc) => {
            if (dt > oc.start && dt < oc.end) ocSum += oc.count;
        });
        //console.log("isDateOccupied", debugStr(dt), "has occupation sum", ocSum);
        return ocSum >= res.capacity;
    };

    console.log("isDateOccupied for", lodging, "sub", lodgingSub, debugStr(dateFrom), "to", debugStr(dateTo), "suggest", suggest, "got", res);
    if (res.capacity <= 0) return { occupied: true } // not possible to find anything

    //FIXME loop does not work if only one day selected 
    dt.setDate(dt.getDate() + 1); // first day will be checked last so arrival suggestion comes after full block errors
    while (dt <= dateTo) {
        if (dt.toDateString() == dateTo.toDateString()) {
            if (occupied(dateTo)) {
                // would it still be occupied if guest chooses an earlier departure time?
                if (suggest)
                    for (let i = dateTo.getUTCHours() - 1; i >= 8; --i) {
                        const dt2 = new Date(dt);
                        dt2.setHours(i, 0, 0, 0);
                        if (!occupied(dt2)) return { occupied: true, conflictingDate: dt2, suggestedDeparture: i };
                    }
                return { occupied: true, conflictingDate: dateTo };
            }
        } else if (occupied(dt))
            return { occupied: true, conflictingDate: dt };
        dt.setDate(dt.getDate() + 1);
    }
    if (occupied(dateFrom)) {
        // would it still be occupied if guest chooses a later arrival time?
        //console.log(new Date().getTimezoneOffset());
        if (suggest)
            for (let i = dateFrom.getUTCHours() + 1; i <= 22; ++i) {
                const dt2 = new Date(dateFrom);
                dt2.setHours(i, 0, 0, 0);
                if (!occupied(dt2)) return { occupied: true, conflictingDate: dt2, suggestedArrival: i };
            }
        return { occupied: true, conflictingDate: dateFrom };
    }

    return { occupied: false };
}

/**
 * @typedef {{
 *   title: string,
 *   price: number,
 *   depositName?: string,
 *   cntNights?: number,
 *   cntAdults?: number
 * }} PriceLine
 */

/**
 * Checks if given date range is (partially) disabled / occupied while respecting lodging based capacities..
 * @param {string} lodgingID
 * @param {Date}   dateFrom
 * @param {Date}   dateTo
 * @param {Number} cntAdults
 * @returns {Promise<PriceLine[]>}
 */
export async function calculateReservationPrice(lodgingID, dateFrom, dateTo, cntAdults, depositGiven = []) {
    console.log("calculateReservationPrice for", lodgingID, debugStr(dateFrom), "to", debugStr(dateTo), "adults", cntAdults);
    if (!lodgingID || !dateFrom || !dateTo) return [];
    let res = [];
    let q = wixData.query("pricesVisitor");
    const results = await q.eq("lodging", lodgingID).or(q.hasSome("depositName", depositGiven)).ascending("order").find();
    results.items.forEach(item => {
        console.log("calculateReservationPrice", item);
        let line = { title: item.title, price: item.price, depositName: item.depositName };
        if (item.perNight) {
            let cntNights = 0;
            if (item.start && item.end) {
                const periods = [];
                const dS = new Date(item.start);
                const dE = new Date(item.end);
                for (let y = dateFrom.getFullYear(); y <= dateTo.getFullYear(); ++y) {
                    const start = new Date(y, dS.getUTCMonth(), dS.getUTCDate());
                    const end = new Date(y, dE.getUTCMonth(), dE.getUTCDate());
                    if (start <= end)
                        // within one year
                        periods.push({ start, end });
                    else
                        // overlapping a year => need to split
                        periods.push({ start, end: new Date(y, 11, 31) }, { start: new Date(y, 0, 1), end });
                }

                periods.forEach(period => {
                    // item.start and item.end only contain valid month and day-of-month, the year field is always 1970 and shall be ignored
                    const overlapStart = new Date(Math.max(dateFrom.getTime(), period.start.getTime()));
                    const overlapEnd = new Date(Math.min(dateTo.getTime(), period.end.getTime()));
                    cntNights += nightsBetween(overlapStart, overlapEnd);
                });
                console.log("calculateReservationPrice periods", periods, "cntNights", cntNights);
            } else
                cntNights = nightsBetween(dateFrom, dateTo);
            res.push({ ...line, cntNights: cntNights, cntAdults: item.perAdult ? cntAdults : 0 });
        } else if (item.perAdult) {
            res.push({ ...line, cntAdults: cntAdults });
        } else if (item.perReservation) {
            res.push(line);
        }
    });
    return res;
}

export async function sendMails(item, informGuestManager, customMessage = "", diff = []) {
    try {
        const options = new Map();
        options.set("firstName", item.firstName);
        options.set("lastName", item.lastName);
        options.set("email", item.email);
        options.set("lodging", await generateLodgingName(item));
        options.set("dateFrom", convertToDate(item.dateFrom));
        options.set("dateTo", convertToDate(item.dateTo));
        options.set("customMessage", customMessage);
        generateTriggerMailTable(options, "a", diff);
        //generateTriggerMailTable(options, "b", generateCostsTable(item));
        console.log("sendMails", item.firstName, item.lastName, item.email, options);
        sendMail("ReservationRequested", item, Object.fromEntries(options));
        if (informGuestManager)
            sendMail("ReservationAttention", { firstName: "web", lastName: "master", email: "webmaster@fsg-alfdorf.de" }, Object.fromEntries(options));
    } catch (err) {
        console.error("sendMails", err);
    }
}

let lodgingsMap = null;

export async function generateLodgingName(item) {
    if (!lodgingsMap) lodgingsMap = Object.fromEntries((await wixData.query("lodgings").find()).items.map(l => [l.lodgingID, l]));
    const lme = lodgingsMap[item.lodging];
    if (lme == null) {
        console.error(`Could not find #lodgings with lodgingID == ${item.lodging}`);
        return String(item.lodging ?? "");
    } else {
        return item.lodgingSub > 0 && lme.capacityPrefix ? `${lme.title} ${lme.capacityPrefix} ${item.lodgingSub}` : lme.title;
    }
}

async function generateCostsTable(item) { //TODO also use paidSum like in Guest Management
    let costs = [];
    costs.push(["Leistung", "# Erw.", "# NÃ¤chte", "Preis je", "Gesamt"]);
    let sum = 0;
    let sumDeposit = 0;
    (await calculateReservationPrice(item.lodging, new Date(item.dateFrom), new Date(item.dateTo), item.cntAdults, item.cntChildren)).forEach(line => {
        console.log("calculateReservationPrice", line);
        let row = [line.title, line.cntAdults ? `* ${line.cntAdults}` : "", line.cntNights ? `* ${line.cntNights}` : ""];
        const price = line.price * (line.cntAdults || 1) * (line.cntNights || 1);
        if (line.depositName) {
            sumDeposit += price;
            row.push(`(${line.price.toFixed(2)} â¬)`, `(${price.toFixed(2)} â¬)`);
        } else {
            sum += price;
            row.push(`${line.price.toFixed(2)} â¬ `, `${price.toFixed(2)} â¬ `);
        }
        costs.push(row);
    });
    costs.push(["Summe", "", "", "", `${sum.toFixed(2)} â¬ `]);
    if (sumDeposit > 0)
        costs.push(["+ Kaution/Pfand", "", "", "", `(${sumDeposit.toFixed(2)} â¬)`]);
    return generateHTMLTable(costs, [
        "Leistung",
        { align: "right", label: "# Erw." },
        { align: "right", label: "# NÃ¤chte" },
        { align: "right", label: "Preis je" },
        { align: "right", label: "Gesamt" }]);
}

function convertToDate(v) {
    return new Date(v).toLocaleDateString("de-DE", { weekday: "long", month: "long", year: "numeric", day: "numeric" });
}

/**
 * Generates a table in HTML format from the given parameters.
 * @param rows {any[][]} a list of rows with each a list of cells a either 
 * a dict { value, align="left"|"right"|"center", bold=true|false, italic=true|false }, or
 * any kind of data that will be converted to a string
 * @param header {any[]} a list of column headers each as either
 * a dict { label, align="left"|"right"|"center", bold=true|false, italic=true|false }, or
 * null to merge this cell with it's previous one(s), or
 * any kind of data that will be converted to a string
 * @returns {string} the <table> string
 */
export function generateHTMLTable(rows, header = []) {
    const clsStyle = (align = "") => {
        return ` class="font_7" style="padding: 8px${align ? `; text-align: ${align}` : ""}"`;
    };

    let html = `<table>`;
    let alignments = [];
    if (header) {
        html += "<thead><tr>";
        header.forEach(v => {
            if (typeof v == "object" && v && "label" in v) {
                html += `<th${clsStyle(v.align)}>${v.bold ? "<b>" : ""}${v.italic ? "<i>" : ""}${v.label}${v.italic ? "</i>" : ""}${v.bold ? "</b>" : ""}</th>`;
                alignments.push(v.align);
            } else {
                html += `<th${clsStyle()}>${v}</th>`;
                alignments.push("");
            }
        });
        html += "</tr></thead>";
    }
    html += "<tbody>";
    rows.forEach(row => {
        html += "<tr>";
        row.forEach((v, ci) => {
            if (v != null) {
                let merge = 0;
                for (let i = ci + 1; i < row.length && row[i]; ++i) ++merge;
                if (typeof v == "object" && v && "value" in v) {
                    html += `<td${clsStyle(v.align ?? alignments[ci] ?? "")}${merge > 0 ? ` colspan="${merge}"` : ""}>${v.bold ? "<b>" : ""}${v.italic ? "<i>" : ""}${v.value}${v.italic ? "</i>" : ""}${v.bold ? "</b>" : ""}</td>`;
                } else html += `<td${clsStyle(alignments[ci] ?? "")}>${v}</td>`;
            }
        });
        html += "</tr>";
    });
    html += "</tbody></table>";
    return html;
}

/**
 * Generates a table in in a format suitable for trigger-mails from the given parameters (max 5 x 8 of size).
 * @param rows {any[][]} a list of rows with each a list of cells a either 
 * a dict { value }, or any kind of data that will be converted to a string
 * @param prefix {string} prefix for the generated arguments (mostly single character)
 * @param options {Map} the Map in which the new arguments will be pushed.
 */
export function generateTriggerMailTable(options, prefix, rows) {
    rows.forEach((row, ri) => {
        if (ri <= 7) row.forEach((v, ci) => {
            if (v != null && ci <= 4)
                options.set(`${prefix}${ri + 1}${ci + 1}`, String(typeof v == "object" && v && "value" in v ? v.value : v));
        });
    });
}

export function sendMail(mailId, item, options) {
    contacts.appendOrCreateContact({
        name: { first: item.firstName, last: item.lastName, },
        emails: [{ email: item.email },]
    }).then((contactInfo) => {
        triggeredEmails.emailContact(mailId, contactInfo.contactId, { variables: options }).catch((err) => {
            console.error(`Cannot send e-mail ${mailId}`, err);
        });
    }).catch((err) => {
        console.error("Cannot create contact", err);
    });
}