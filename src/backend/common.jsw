import wixData from 'wix-data';
import { triggeredEmails, contacts } from 'wix-crm-backend';

import { nightsBetween, toLocal, debugStr } from 'public/cms.js';

/**
 * Checks if given date range is (partially) disabled / occupied while respecting lodging based capacities.
 * For sub lodgings it ensures capacity of the base lodging is sufficient and specific sub lodging is not occupied.
 * @param {string} lodging
 * @param {Number} lodgingSub
 * @param {Date}   dateFrom date only (UTC)
 * @param {Date}   dateTo date only (UTC)
 * @param {string} exclude if set, reservations from this item will be ignored
 * @returns {Promise<Object>} containing {Number} capacity, {{{Date} start in UTC, {Date} end in UTC, {Number} count} []} occupations
 */
export async function getOccupations(lodging, lodgingSub, dateFrom, dateTo, exclude = "") {
    if (!lodging) return { capacity: 0, occupations: [] };
    const resL = await wixData.query("lodgings").eq("lodgingID", lodging).find();
    if (resL.items.length > 1) console.error(`Have multiple matches from #lodgings with lodgingID == ${lodging}: ${resL.items}`);
    const capacity = resL.items.length == 0 ? 0 : resL.items[0].capacity;

    console.log("getOccupations for", lodging, "capacity", capacity, debugStr(dateFrom), "to", debugStr(dateTo));
    if (capacity <= 0) return { capacity: 0, occupations: [] }; // cannot check availability if lodging field is empty / invalid

    const res = await wixData.query("disabledDates").eq("lodging", lodging).le("dateFrom", dateTo).ge("dateTo", dateFrom).find();
    let occupations = [];
    res.items.forEach(item => {
        if (item._id != exclude) {
            const start = new Date(item.dateFrom);
            const end = new Date(item.dateTo);
            // if our specfic sub lodging is occupied, we have no capacity remaining, so count == maxAvailable
            const count = lodgingSub > 0 && item.lodgingSub == lodgingSub ? capacity : 1;
            occupations.push({ start, end, count });
        }
    });

    console.log("getOccupations", occupations);

    return { capacity, occupations };
}

/**
 * Checks if any date within the given date range is fully occupied based on lodging capacities.
 * For sub lodgings it ensures capacity of the base lodging is sufficient and specific sub lodging is not occupied.
 * @param {string} lodging
 * @param {Number} lodgingSub
 * @param {Date}   dateFrom date only (UTC)
 * @param {Date}   dateTo date only (UTC)
 * @param {boolean} suggest later arrival or earlier departure suggestion
 * @param {string} exclude if set, reservations from this item will be ignored
 * @returns {Promise<any>}
 */
export async function isDateOccupied(lodging, lodgingSub, dateFrom, dateTo, suggest = false, exclude = "") {
    const dt = new Date(dateFrom);
    dt.setUTCHours(0, 0, 0, 0);
    const oc = await getOccupations(lodging, lodgingSub, dateFrom, dateTo, exclude);

    const occupied = (dt) => {
        let ocSum = 0;
        oc.occupations.forEach((oc) => {
            if (dt > oc.start && dt < oc.end) ocSum += oc.count;
        });
        //console.log("isDateOccupied", debugStr(dt), "has occupation sum", ocSum);
        return ocSum >= oc.capacity;
    };

    console.log("isDateOccupied for", lodging, "sub", lodgingSub, debugStr(dateFrom), "to", debugStr(dateTo), "suggest", suggest, "got", oc);
    if (oc.capacity <= 0) return { occupied: true } // not possible to find anything

    //FIXME loop does not work if only one day selected 
    dt.setDate(dt.getDate() + 1); // first day will be checked last so arrival suggestion comes after full block errors
    while (dt <= dateTo) {
        if (dt.toDateString() == dateTo.toDateString()) {
            if (occupied(dateTo)) {
                // would it still be occupied if guest chooses an earlier departure time?
                if (suggest)
                    for (let i = dateTo.getUTCHours() - 1; i >= 8; --i) {
                        const dt2 = new Date(dt);
                        dt2.setHours(i, 0, 0, 0);
                        if (!occupied(dt2)) return { occupied: true, conflictingDate: dt2, suggestedDeparture: i };
                    }
                return { occupied: true, conflictingDate: dateTo };
            }
        } else if (occupied(dt))
            return { occupied: true, conflictingDate: dt };
        dt.setDate(dt.getDate() + 1);
    }
    if (occupied(dateFrom)) {
        // would it still be occupied if guest chooses a later arrival time?
        //console.log(new Date().getTimezoneOffset());
        if (suggest)
            for (let i = dateFrom.getUTCHours() + 1; i <= 22; ++i) {
                const dt2 = new Date(dateFrom);
                dt2.setHours(i, 0, 0, 0);
                if (!occupied(dt2)) return { occupied: true, conflictingDate: dt2, suggestedArrival: i };
            }
        return { occupied: true, conflictingDate: dateFrom };
    }

    return { occupied: false };
}

export async function sendMails(item, informGuestManager, customMessage = "", diff = []) {
    try {
        const options = {
            firstName: item.firstName,
            lastName: item.lastName,
            email: item.email,
            lodging: await generateLodgingName(item),
            dateFrom: convertToDate(item.dateFrom),
            dateTo: convertToDate(item.dateTo),
            customMessage
        };
        generateTriggerMailTable(options, "a", diff);
        generateTriggerMailTable(options, "b", await generateCostsTable(item));
        console.log("sendMails", item.firstName, item.lastName, item.email, options);
        sendMail("ReservationRequested", item, options);
        if (informGuestManager) sendMail("ReservationAttention", { firstName: "web", lastName: "master", email: "webmaster@fsg-alfdorf.de" }, options);
    } catch (err) {
        console.error("sendMails", err);
    }
}

export function sendMail(mailId, item, options) {
    contacts.appendOrCreateContact({
        name: { first: item.firstName, last: item.lastName, },
        emails: [{ email: item.email },]
    }).then((contactInfo) => {
        triggeredEmails.emailContact(mailId, contactInfo.contactId, { variables: options }).catch((err) => {
            console.error(`Cannot send e-mail ${mailId}`, err);
        });
    }).catch((err) => {
        console.error("Cannot create contact", err);
    });
}

export async function generateLodgingName(item) {
    if (!lodgingsMap) lodgingsMap = Object.fromEntries((await wixData.query("lodgings").find()).items.map(l => [l.lodgingID, l]));
    const lme = lodgingsMap[item.lodging];
    if (lme == null) {
        console.error(`Could not find #lodgings with lodgingID == ${item.lodging}`);
        return String(item.lodging ?? "");
    } else {
        return item.lodgingSub > 0 && lme.capacityPrefix ? `${lme.title} ${lme.capacityPrefix} ${item.lodgingSub}` : lme.title;
    }
}
let lodgingsMap = null;

export async function generateCostsTable(item) {
    const formatPrice = (price, br) => `${br ? "(" : ""}${price.toFixed(2)} â‚¬${br ? ")" : ""}`;

    const dateFrom = new Date(item.dateFrom);
    const dateTo = new Date(item.dateTo);
    console.log("generateCostsTable for", item.lodging, debugStr(dateFrom), "to", debugStr(dateTo), "adults", item.cntAdults);
    let costs = [];
    let sum = 0;
    let sumDeposit = 0;
    let sumReturn = 0;
    if (!item.lodging || !dateFrom || !dateTo) return [];
    let q = wixData.query("pricesVisitor");
    (await q.eq("lodging", item.lodging).or(q.hasSome("depositName", item.deposit)).ascending("order").find()).items.forEach(lodging => {
        console.log("generateCostsTable", lodging);
        let cntNights = 0;
        if (lodging.perNight) {
            if (lodging.start && lodging.end) {
                const periods = [];
                const dS = new Date(lodging.start);
                const dE = new Date(lodging.end);
                for (let y = dateFrom.getFullYear(); y <= dateTo.getFullYear(); ++y) {
                    const start = new Date(y, dS.getUTCMonth(), dS.getUTCDate());
                    const end = new Date(y, dE.getUTCMonth(), dE.getUTCDate());
                    if (start <= end)
                        // within one year
                        periods.push({ start, end });
                    else
                        // overlapping a year => need to split
                        periods.push({ start, end: new Date(y, 11, 31) }, { start: new Date(y, 0, 1), end });
                }

                periods.forEach(period => {
                    // lodging.start and lodging.end only contain valid month and day-of-month, the year field is always 1970 and shall be ignored
                    const overlapStart = new Date(Math.max(dateFrom.getTime(), period.start.getTime()));
                    const overlapEnd = new Date(Math.min(dateTo.getTime(), period.end.getTime()));
                    cntNights += nightsBetween(overlapStart, overlapEnd);
                });
                console.log("generateCostsTable periods", periods, "cntNights", cntNights);
            } else
                cntNights = nightsBetween(dateFrom, dateTo);
        }
        if (lodging.perNight || lodging.perAdult || lodging.perReservation) {
            const cntAdults = lodging.perAdult ? item.cntAdults : 0;
            const price = lodging.price * (cntAdults || 1) * (cntNights || 1);
            const dep = lodging.depositName != null;
            costs.push([
                lodging.title,
                cntAdults ? `* ${cntAdults}` : "",
                cntNights ? `* ${cntNights}` : "",
                formatPrice(lodging.price, dep),
                formatPrice(price, dep)
            ]);
            if (!dep) sum += price; else if (item.deposit.includes(lodging.depositName)) sumReturn -= price; else sumDeposit += price;
        }
    });

    costs.push(["Summe", null, null, null, formatPrice(sum, false)]);
    if (item.paidSum > 0) {
        costs.push(["Bereits bezahlt", null, null, null, formatPrice(item.paidSum, false)]);
        if (item.paidSum != sum)
            costs.push([item.paidSum <= sum ? "Noch zu bezahlen" : "- RÃ¼ckzahlung", null, null, null, formatPrice(sum - item.paidSum, false)]);
    }
    if (sumDeposit > 0)
        costs.push(["+ Kaution/Pfand", null, null, null, formatPrice(sumDeposit, true)]);
    if (sumReturn < 0)
        costs.push(["- Kaution/Pfand zurÃ¼ck", null, null, null, formatPrice(sumReturn, false)]);
    return costs;
}

function convertToDate(v) {
    return new Date(v).toLocaleDateString("de-DE", { weekday: "long", month: "long", year: "numeric", day: "numeric" });
}

/**
 * Generates a table in HTML format from the given parameters.
 * @param rows {any[][]} a list of rows with each a list of cells a either 
 * a dict { value, align="left"|"right"|"center", bold=true|false, italic=true|false }, or
 * any kind of data that will be converted to a string
 * @param header {any[]} a list of column headers each as either
 * a dict { label, align="left"|"right"|"center", bold=true|false, italic=true|false }, or
 * null to merge this cell with it's previous one(s), or
 * any kind of data that will be converted to a string
 * @returns {string} the <table> string
 */
export function generateHTMLTable(rows, header = []) {
    const clsStyle = (align) => ` class="font_7" style="padding: 8px${align ? `; text-align: ${align}` : ""}"`;

    let html = `<table>`;
    let alignments = [];
    if (header) {
        html += "<thead><tr>";
        header.forEach(v => {
            if (typeof v == "object" && v && "label" in v) {
                html += `<th${clsStyle(v.align)}>${v.bold ? "<b>" : ""}${v.italic ? "<i>" : ""}${v.label}${v.italic ? "</i>" : ""}${v.bold ? "</b>" : ""}</th>`;
                alignments.push(v.align);
            } else {
                html += `<th${clsStyle("")}>${v}</th>`;
                alignments.push("");
            }
        });
        html += "</tr></thead>";
    }
    html += "<tbody>";
    rows.forEach(row => {
        html += "<tr>";
        row.forEach((v, ci) => {
            if (v != null) {
                let merge = 0;
                for (let i = ci + 1; i < row.length && row[i]; ++i) ++merge;
                if (typeof v == "object" && v && "value" in v) {
                    html += `<td${clsStyle(v.align ?? alignments[ci] ?? "")}${merge > 0 ? ` colspan="${merge}"` : ""}>${v.bold ? "<b>" : ""}${v.italic ? "<i>" : ""}${v.value}${v.italic ? "</i>" : ""}${v.bold ? "</b>" : ""}</td>`;
                } else html += `<td${clsStyle(alignments[ci] ?? "")}>${v}</td>`;
            }
        });
        html += "</tr>";
    });
    html += "</tbody></table>";
    return html;
}

/**
 * Generates a table in in a format suitable for trigger-mails from the given parameters (max 5 x 8 of size).
 * @param rows {any[][]} a list of rows with each a list of cells a either 
 * a dict { value }, or any kind of data that will be converted to a string
 * @param prefix {string} prefix for the generated arguments (mostly single character)
 * @param options {{}} the Map in which the new arguments will be pushed.
 */
export function generateTriggerMailTable(options, prefix, rows) {
    rows.forEach((row, ri) => {
        if (ri <= 7) row.forEach((v, ci) => {
            if (v != null && ci <= 4) {
                options[`${prefix}${ri + 1}${ci + 1}`] = String(typeof v === "object" && v && "value" in v ? v.value : v);
            }
        });
    });
}